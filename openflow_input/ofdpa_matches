// Copyright 2014, Big Switch Networks, Inc.
//
// LoxiGen is licensed under the Eclipse Public License, version 1.0 (EPL), with
// the following special exception:
//
// LOXI Exception
//
// As a special exception to the terms of the EPL, you may distribute libraries
// generated by LoxiGen (LoxiGen Libraries) under the terms of your choice, provided
// that copyright and licensing notices generated by LoxiGen are not altered or removed
// from the LoxiGen Libraries and the notice provided below is (i) included in
// the LoxiGen Libraries, if distributed in source code form and (ii) included in any
// documentation for the LoxiGen Libraries, if distributed in binary form.
//
// Notice: "Copyright 2014, Big Switch Networks, Inc. This library was generated by the LoxiGen Compiler."
//
// You may not use this file except in compliance with the EPL or LOXI Exception. You may obtain
// a copy of the EPL at:
//
// http://www.eclipse.org/legal/epl-v10.html
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// EPL for the specific language governing permissions and limitations
// under the EPL.

#version 4

// ======================= OFDPA extension OXM
//struct of_oxm_ofdpa : of_oxm {
//    uint32_t type_len == 0xffff0000;
//    uint32_t experimenter == 0x1018;
//    uint16_t subtype == ?;
//    of_octets_t data;
//};

//VRF
// Bits: 16
// No
// Pipeline metadata. Virtual Router, used to select virtual routing table.
struct of_oxm_ofdpa_vrf : of_oxm {
    uint32_t type_len == 0xffff0206;
    uint32_t experimenter == 0x1018;  // Experimenter ID:
    //uint16_t  subtype == ?; // OFDPA_OXM_VRF:1
    uint16_t value;
};

// Traffic Class
// Bits: 4
// No
// Pipeline metadata. QoS traffic class.
struct of_oxm_ofdpa_traffic_class : of_oxm {
    uint32_t type_len == 0xffff0405;
    uint32_t experimenter == 0x1018;  // Experimenter ID:
    //uint16_t subtype == 2;            // OFDPA_OXM_TRAFFIC_CLASS
    uint8_t  value;
};

// Color
// Bits: 2
// No
// Pipeline metadata. Drop precedence.
// Values are:
// 00: Green
// 01: Yellow
// 10: Red
// 11: reserved
struct of_oxm_ofdpa_color : of_oxm {
    uint32_t type_len == 0xffff0605;
    uint32_t experimenter == 0x1018; // Experimenter ID:
    //uint16_t subtype == 3;            // OFDPA_OXM_COLOR
    uint8_t  value;
};

// DEI
// Bits: 1
// No
// Prerequisite: VLAN tag
// Drop eligibility indication from 802.1Q
struct of_oxm_ofdpa_dei : of_oxm {
    uint32_t type_len == 0xffff0805;
    uint32_t experimenter == 0x1018;  // Experimenter ID:
    //uint16_t subtype == 4;            // OFDPA_OXM_DEI
    uint8_t  value;
};

// QoS Index
// Bits: 8
// No
// None
// Pipeline metadata. Used when looking up Traffic Class and Color based on packet contents in QoS Trust Flow tables.

struct of_oxm_ofdpa_qos_index : of_oxm {
    uint32_t type_len == 0xffff0a05;
    uint32_t experimenter == 0x1018;  // Experimenter ID:
    //uint16_t subtype == 5;            // OFDPA_OXM_QOS_INDEX
    uint8_t  value;
};

// LMEP Id
// Bits: 32
// No
// None
// Pipeline metadata. Used to identify a local MEP or MIP instance.
struct of_oxm_ofdpa_lmep_id : of_oxm {
    uint32_t type_len == 0xffff0c08;
    uint32_t experimenter == 0x1018;  // Experimenter ID:
    //uint16_t subtype == 6;            // OFDPA_OXM_LMEP_ID
    uint32_t value;
};

// MPLS_TTL
// Bits: 8
// Masked: No
// Prerequisites: ETH-TYPE=0x8847
struct of_oxm_ofdpa_mpls_ttl : of_oxm {
    uint32_t type_len == 0xffff0e05;
    uint32_t experimenter == 0x1018;  // Experimenter ID:
    //uint16_t subtype == 7;            // OFDPA_OXM_MPLS_TTL
    uint8_t  value;
};

// MPLS L2 Port
// Bits: 32
// Masked: Yes
// Pipeline metadata. Used to identify an MPLS-TP pseudo wire endpoint.
struct of_oxm_ofdpa_mpls_l2_port : of_oxm {
    uint32_t type_len == 0xffff1008;
    uint32_t experimenter == 0x1018;  // Experimenter ID:
    //uint16_t subtype == 8;            // OFDPA_OXM_MPLS_L2_Port
    uint32_t value;
};

struct of_oxm_ofdpa_mpls_l2_port_masked : of_oxm {
    uint32_t type_len == 0xffff110c;
    uint32_t experimenter == 0x1018;  // Experimenter ID:
    //uint16_t subtype == 8;            // OFDPA_OXM_MPLS_L2_Port
    uint32_t value;
    uint32_t value_mask;
};


// L3_IN_PORT
// Bits: 32
// Masked: No
// Pipeline metadata. Used to identify an L3 VPN endpoint.
struct of_oxm_ofdpa_l3_in_port : of_oxm {
    uint32_t type_len == 0xffff1208;
    uint32_t experimenter == 0x1018;  // Experimenter ID:
    //uint16_t subtype == 9;            // L3_IN_PORT
    uint32_t value;
};

// OVID
// Bits: 16
// Masked: No
// Prereq: VLAN tag
// Pipeline metadata.
// Outer VLAN id, which has been popped in the VLAN Flow Table,
// to enable double tag matching in the VLAN 1 Flow Table.
struct of_oxm_ofdpa_ovid : of_oxm {
    uint32_t type_len == 0xffff1406;
    uint32_t experimenter == 0x1018;  // Experimenter ID:
    //uint16_t subtype == 10;            // OVID
    uint16_t value;
};

// MPLS_DATA_FIRST_NIBBLE
// Bits: 4
// Masked: No
// Prereq: ETH-TYPE=0x8847 and MPLS_BOS=1
// Determine if data (0000b) or control (0001b)
struct of_oxm_ofdpa_mpls_data_first_nibble: of_oxm {
    uint32_t type_len ==  0xffff1605;
    uint32_t experimenter == 0x1018;  // Experimenter ID:
    //uint16_t subtype == 11;           // MPLS_DATA_FIRST_NIBBLE
    uint8_t value;
};

// MPLS_ACH_CHANNEL
// Bits: 16
// Masked: No
// MPLS control frame - MPLS_DATA_FIRST_NIBBLE is one
struct of_oxm_ofdpa_mpls_ach_channel : of_oxm {
    uint32_t type_len == 0xffff1806;
    uint32_t experimenter == 0x1018;  // Experimenter ID:
    //uint16_t subtype == 12;           // MPLS_ACH_CHANNEL
    uint16_t value;
};

// MPLS_NEXT_LABEL_IS_GAL
// Bits: 1
// No
// Prereq: ETH-TYPE=0x8847
// Pipeline metadata derived from the packet parser “peeking?at the next label.
struct of_oxm_ofdpa_mpls_next_label_is_gal: of_oxm {
    uint32_t type_len ==  0xffff1a05;
    uint32_t experimenter == 0x1018;  // Experimenter ID:
    //uint16_t subtype == 13;           // MPLS_NEXT_LABEL_IS_GAL
    uint8_t value;
};

// OAM_Y1731_MDL
// Bits: 3
// Masked: No
// Prereq: ETH-TYPE=0x8902
// OAM PDU Maintenance Domain Level
struct of_oxm_ofdpa_oam_y1731_mdl: of_oxm {
    uint32_t type_len ==  0xffff1c05;
    uint32_t experimenter == 0x1018;  // Experimenter ID:
    //uint16_t subtype == 14;           // OAM_Y1731_MDL
    uint8_t value;
};


// OAM_Y1731_OPCODE
// Bits: 8
// Masked: No
// Prereq: ETH-TYPE=0x8902
// OAM PDU opcode
struct of_oxm_ofdpa_oam_y1731_opcode: of_oxm {
    uint32_t type_len ==  0xffff1e05;
    uint32_t experimenter == 0x1018;  // Experimenter ID:
    //uint16_t subtype == 15;           // OAM_Y1731_OPCODE
    uint8_t value;
};

// COLOR_ACTIONS_INDEX
// Bits: 32
// Mask: No
// Pipeline metadata. Used to identify an entry in the Color Based Actions Flow Table.
struct of_oxm_ofdpa_color_actions_index: of_oxm {
    uint32_t type_len ==  0xffff2008;
    uint32_t experimenter == 0x1018;  // Experimenter ID:
    //uint16_t subtype == 16;           // COLOR_ACTIONS_INDEX
    uint32_t value;
};

// OFDPA_OXM_TXFCL
// Bits: 64
// Masked: No
// OAM Data Counter Table value set by Set-Counter-Fields.
// Pipeline metadata field sent to Network Protection App. Read only from Controller.
struct of_oxm_ofdpa_txfcl: of_oxm {
    uint32_t type_len ==  0xffff220c;
    uint32_t experimenter == 0x1018;  // Experimenter ID:
    //uint16_t subtype == 17;           // OFDPA_OXM_TXFCL
    uint64_t value;
};

// OFDPA_OXM_RXFCL
// Bits: 64
// Masked: No
// OAM Data Counter Table value set by Set-Counter-Fields. Pipeline metadata field sent to Network Protection App. Read only from Controller.
struct of_oxm_ofdpa_rxfcl: of_oxm {
    uint32_t type_len ==  0xffff240c;
    uint32_t experimenter == 0x1018;  // Experimenter ID:
    //uint16_t subtype == 18;           // OFDPA_OXM_RXFCL
    uint64_t value;
};

// OFDPA_OXM_RX_TIMESTAMP
// Bits: 64
// Masked: No
// Timestamp value for current OAM PDU. Pipeline metadata field sent to Network Protection App.
// Read only from Controller.
struct of_oxm_ofdpa_rx_timestamp: of_oxm {
    uint32_t type_len ==  0xffff260c;
    uint32_t experimenter == 0x1018;  // Experimenter ID:
    //uint16_t subtype == 19;           // OFDPA_OXM_RX_TIMESTAMP
    uint64_t value;
};

// OFDPA_OXM_PROTECTION_INDEX
// Bits: 8
// Masked: No
// Indicates whether label is for protection path (0). Other values represent working paths.
struct of_oxm_ofdpa_protection_index: of_oxm {
    uint32_t type_len ==  0xffff2a05;
    uint32_t experimenter == 0x1018;  // Experimenter ID:
    //uint16_t subtype == 21;           // OFDPA_OXM_PROTECTION_INDEX
    uint8_t value;
};

// OFDPA_OXM_ETH_SUB_TYPE
// Bits: 2
// Masked: No
// Prereq: ETH_TYPE=0x8809
// Identify EFM frame

// MPLS_TYPE
// Bits: 8
// Masked: No
// Prerequisites: ETH-TYPE=0x8847
struct of_oxm_ofdpa_mpls_type : of_oxm {
    uint32_t type_len == 0xffff2e06;
    uint32_t experimenter == 0x1018;  // Experimenter ID:
    //uint16_t subtype == 23;            // OFDPA_OXM_MPLS_TYPE
    uint16_t  value;
};

// ALLOW_VLAN_TRANSLATION
// Bits: 8
// Masked: No
// Prerequisites: ETH-TYPE=0x8847
struct of_oxm_ofdpa_allow_vlan_translation : of_oxm {
    uint32_t type_len == 0xffff3005;
    uint32_t experimenter == 0x1018;  // Experimenter ID:
    //uint16_t subtype == 24;            // OFDPA_OXM_ALLOW_VLAN_TRANSLATION
    uint8_t  value;
};




