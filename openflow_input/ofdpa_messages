// Copyright 2014, Big Switch Networks, Inc.
//
// LoxiGen is licensed under the Eclipse Public License, version 1.0 (EPL), with
// the following special exception:
//
// LOXI Exception
//
// As a special exception to the terms of the EPL, you may distribute libraries
// generated by LoxiGen (LoxiGen Libraries) under the terms of your choice, provided
// that copyright and licensing notices generated by LoxiGen are not altered or removed
// from the LoxiGen Libraries and the notice provided below is (i) included in
// the LoxiGen Libraries, if distributed in source code form and (ii) included in any
// documentation for the LoxiGen Libraries, if distributed in binary form.
//
// Notice: "Copyright 2014, Big Switch Networks, Inc. This library was generated by the LoxiGen Compiler."
//
// You may not use this file except in compliance with the EPL or LOXI Exception. You may obtain
// a copy of the EPL at:
//
// http://www.eclipse.org/legal/epl-v10.html
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// EPL for the specific language governing permissions and limitations
// under the EPL.

#version 4

//OFDPA experimental messages commands
enum ofdpa_message_mod_command (wire_type=uint32_t) {
    OFDPA_MSG_MOD_ADD = 0,
    OFDPA_MSG_MOD_MODIFY = 1,
    OFDPA_MSG_MOD_DELETE = 2,
};

//OFDPA action table type (used also as experimenter message subtype)
enum OFDPA_ACTION_TABLE_TYPE_t (wire_type=uint32_t) {
  //OFDPA_EXP_MPLS_SET_QOS_MOD_MSG = 0,
  //OFDPA_EXP_MPLS_SET_QOS_MULTIPART = 1,

  OFDPA_EXP_OAM_DATA_PLANE_COUNTER_MOD_MSG = 2,
  OFDPA_EXP_OAM_DATA_PLANE_COUNTER_MULTIPART = 3,

  OFDPA_EXP_DROP_STATUS_MOD_MSG = 4,
  OFDPA_EXP_DROP_STATUS_MULTIPART = 5,

  OFDPA_EXP_MPLS_VPN_LABEL_REMARK_MOD_MSG = 6,
  OFDPA_EXP_MPLS_VPN_LABEL_REMARK_MULTIPART = 7,

  OFDPA_EXP_MPLS_TUNNEL_LABEL_REMARK_MOD_MSG =	 8,
  OFDPA_EXP_MPLS_TUNNEL_LABEL_REMARK_MULTIPART =	 9,

  //OFDPA_EXP_L2_INTERFACE_REMARK_MOD_MSG = 10,
  //OFDPA_EXP_L2_INTERFACE_REMARK_MULTIPART = 11,

  OFDPA_EXP_CLASS_BASED_CTR_MOD_MSG = 12,
  OFDPA_EXP_CLASS_BASED_CTR_MULTIPART = 13,

  OFDPA_EXP_COLOR_BASED_CTR_MOD_MSG = 14,
  OFDPA_EXP_COLOR_BASED_CTR_MULTIPART = 15

  //OFDPA_EXP_PORT_PROP_SCHEDULER = 16,
  //OFDPA_EXP_QUEUE_MOD_MSG = 17,
  //OFDPA_EXP_QUEUE_DESC_PROP_PARENT = 18,
  //OFDPA_EXP_QUEUE_DESC_PROP_CONGESTION = 19,
  //OFDPA_EXP_SCHEDULER_NODE_MOD_MSG = 20,
  //OFDPA_EXP_SCHEDULER_NODE_MULTIPART = 21,

};

// ======================= OFDPA experimenter messages
struct of_experimenter_ofdpa : of_experimenter {
    uint8_t version;
    uint8_t type == 4;
    uint16_t length;
    uint32_t xid;

    uint32_t experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t subtype == ?;
    enum ofdpa_message_mod_command mod_command;

    of_octets_t data;
};

//stats is the old name of multipart type
struct of_experimenter_multipart_request_ofdpa : of_experimenter_stats_request {
    uint8_t version;
    uint8_t type == 18;
    uint16_t length;
    uint32_t xid;

    uint16_t stats_type == 0xffff;
    enum ofp_stats_request_flags flags;
    pad(4);

    uint32_t experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t subtype == ?;
};

//stats is the old name of multipart type
struct of_experimenter_multipart_reply_ofdpa : of_experimenter_stats_reply {
    uint8_t version;
    uint8_t type == 19;
    uint16_t length;
    uint32_t xid;

    uint16_t stats_type == 0xffff;
    enum ofp_stats_reply_flags flags;
    pad(4);

    uint32_t experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t subtype == ?;
};

// ======================= OFDPA OAM dataplane counter
struct of_ofdpa_oam_dataplane_ctr_mod_msg : of_experimenter_ofdpa {
    uint8_t   version;
    uint8_t   type == 4;
    uint16_t  length;
    uint32_t  xid;

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 2; // OFDPA_EXP_OAM_DATA_PLANE_COUNTER_MOD_MSG

    enum ofdpa_message_mod_command mod_command;
    uint32_t  lmep_id;
    uint64_t  transmit_packets;
    uint64_t  receive_packets;
    uint8_t   traffic_class;
    pad(7);
};

struct of_ofdpa_oam_dataplane_ctr_multipart_request : of_experimenter_multipart_request_ofdpa {
    uint8_t   version;
    uint8_t   type == 18;
    uint16_t  length;
    uint32_t  xid;

    uint16_t  stats_type == 0xffff;
    enum      ofp_stats_request_flags flags;
    pad(4);

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 3; // OFDPA_EXP_MPLS_SET_QOS_MULTIPART

    uint32_t  lmep_id;
    uint8_t   traffic_class;
    pad(3);
};

struct of_ofdpa_oam_dataplane_ctr_multipart_reply : of_experimenter_multipart_reply_ofdpa {
    uint8_t   version;
    uint8_t   type == 19;
    uint16_t  length;
    uint32_t  xid;

    uint16_t  stats_type == 0xffff;
    enum      ofp_stats_reply_flags flags;
    pad(4);

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 3; // OFDPA_EXP_MPLS_SET_QOS_MULTIPART

    uint64_t  transmit_packets;
    uint64_t  receive_packets;
    uint64_t  reference_count;
    uint32_t  lmep_id;
    uint8_t   traffic_class;
    pad(3);
};

// ======================= OFDPA MPLS VPN label remark
struct of_ofdpa_mpls_vpn_label_remark_action_mod_msg : of_experimenter_ofdpa {
    uint8_t   version;
    uint8_t   type == 4;
    uint16_t  length;
    uint32_t  xid;

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 6; // OFDPA_EXP_MPLS_VPN_LABEL_REMARK_MOD_MSG

    enum ofdpa_message_mod_command mod_command;
    uint32_t  index;
    uint8_t   traffic_class;
    uint8_t   color;
    uint8_t   mpls_tc;
    uint8_t   vlan_pcp;
    uint8_t   vlan_dei;
    pad(3);
};

struct of_ofdpa_mpls_vpn_label_remark_action_multipart_request : of_experimenter_multipart_request_ofdpa {
    uint8_t   version;
    uint8_t   type == 18;
    uint16_t  length;
    uint32_t  xid;

    uint16_t  stats_type == 0xffff;
    enum      ofp_stats_request_flags flags;
    pad(4);

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 7; // OFDPA_EXP_MPLS_VPN_LABEL_REMARK_MULTIPART

    uint32_t  index;
    uint8_t   traffic_class;
    uint8_t   color;
    pad(2);
};

struct of_ofdpa_mpls_vpn_label_remark_action_multipart_reply : of_experimenter_multipart_reply_ofdpa {
    uint8_t   version;
    uint8_t   type == 19;
    uint16_t  length;
    uint32_t  xid;

    uint16_t  stats_type == 0xffff;
    enum      ofp_stats_reply_flags flags;
    pad(4);

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 7; // OFDPA_EXP_MPLS_VPN_LABEL_REMARK_MULTIPART

    uint32_t  index;
    uint8_t   traffic_class;
    uint8_t   color;
    uint8_t   mpls_tc;
    uint8_t   vlan_pcp;
    uint8_t   vlan_dei;
    pad(7);
};

//=================== introduced in v.1.70 =========================================================
//=================== Class Based Counter Table

struct of_ofdpa_class_based_ctr_mod_msg : of_experimenter_ofdpa {
    uint8_t   version;
    uint8_t   type == 4;
    uint16_t  length;
    uint32_t  xid;

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 12;  // OFDPA_EXP_CLASS_BASED_CTR_MOD_MSG

    enum ofdpa_message_mod_command mod_command;
    uint32_t  block_index;
    uint64_t  packets;
    uint64_t  bytes;
    uint8_t   traffic_class;
    pad(7);
};

struct of_ofdpa_class_based_ctr_multipart_request : of_experimenter_multipart_request_ofdpa {
    uint8_t   version;
    uint8_t   type == 18;
    uint16_t  length;
    uint32_t  xid;

    uint16_t  stats_type == 0xffff;
    enum      ofp_stats_reply_flags flags;
    pad(4);

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 13; // OFDPA_EXP_CLASS_BASED_CTR_MULTIPART

    uint32_t  block_index;
    uint8_t   traffic_class;
    pad(3);
};

struct of_ofdpa_class_based_ctr_multipart_reply : of_experimenter_multipart_reply_ofdpa {
    uint8_t   version;
    uint8_t   type == 19;
    uint16_t  length;
    uint32_t  xid;

    uint16_t  stats_type == 0xffff;
    enum      ofp_stats_reply_flags flags;
    pad(4);

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 13; // OFDPA_EXP_CLASS_BASED_CTR_MULTIPART

    uint32_t  block_index;
    pad(4);
    uint64_t  packets;
    uint64_t  bytes;
    uint64_t  reference_count;
    uint8_t   traffic_class;
    pad(7);
};

//=================== Color Based Counter Table
struct of_ofdpa_color_based_ctr_mod_msg : of_experimenter_ofdpa {
    uint8_t   version;
    uint8_t   type == 4;
    uint16_t  length;
    uint32_t  xid;

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 14; // OFDPA_EXP_COLOR_BASED_CTR_MOD_MSG

    enum ofdpa_message_mod_command mod_command;
    uint32_t  block_index;
    uint64_t  packets;
    uint64_t  bytes;
    uint8_t   color;
    pad(7);
};

struct of_ofdpa_color_based_ctr_multipart_request : of_experimenter_multipart_request_ofdpa {
    uint8_t   version;
    uint8_t   type == 18;
    uint16_t  length;
    uint32_t  xid;

    uint16_t  stats_type == 0xffff;
    enum      ofp_stats_reply_flags flags;
    pad(4);

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 15; // OFDPA_EXP_COLOR_BASED_CTR_MULTIPART

    uint32_t  block_index;
    uint8_t   color;
    pad(3);
};

struct of_ofdpa_color_based_ctr_multipart_reply : of_experimenter_multipart_reply_ofdpa {
    uint8_t   version;
    uint8_t   type == 19;
    uint16_t  length;
    uint32_t  xid;

    uint16_t  stats_type == 0xffff;
    enum      ofp_stats_reply_flags flags;
    pad(4);

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 15; // OFDPA_EXP_COLOR_BASED_CTR_MULTIPART

    uint32_t  block_index;
    pad(4);
    uint64_t  packets;
    uint64_t  bytes;
    uint64_t  reference_count;
    uint8_t   color;
    pad(7);
};

//=================== Color Set Meter Band
//=================== OF-DPA Experimenter Meter Band types
enum ofdpa_meter_band_exp_type (wire_type=uint16_t) {
  OFDPA_OFPMBT_COLOR_SET =  1,
    //OF_METER_BAND_OFDPA_COLOR_SET = 1,
 };

//=================== OF-DPA Experimenter Color Set Meter Band Modes
enum ofdpa_color_set_band_mode (wire_type=uint8_t) {
    OFDPA_COLOR_SET_BAND_MODE_TRTCM =   1,
    OFDPA_COLOR_SET_BAND_MODE_SRTCM =   2,
    OFDPA_COLOR_SET_BAND_MODE_RFC4115 = 3,
};

//=================== OFPMT_EXPERIMENTER band for Color Set
//struct ofp_meter_band_experimenter_color_set : of_meter_band_experimenter {
struct of_meter_band_ofdpa_color_set : of_meter_band_experimenter {
    uint16_t        type == 65535;
    uint16_t        len;
    uint32_t        rate;
    uint32_t        burst_size;
    uint32_t        experimenter == 0x1018;
    uint16_t        subtype == 3;
    enum ofdpa_color_set_band_mode mode;
    uint8_t   color_aware;
    uint8_t         color;
    pad(3);
};


// ======================= OFDPA drop_status
struct of_ofdpa_drop_status_mod_msg : of_experimenter_ofdpa {
    uint8_t   version;
    uint8_t   type == 4;
    uint16_t  length;
    uint32_t  xid;

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 4; // OFDPA_EXP_DROP_STATUS_MOD_MSG

    enum ofdpa_message_mod_command mod_command;
    uint32_t  index;
    uint8_t   entry_type;
    uint8_t   drop_status;
    pad(6);
};

struct of_ofdpa_drop_status_multipart_request : of_experimenter_multipart_request_ofdpa {
    uint8_t   version;
    uint8_t   type == 18;
    uint16_t  length;
    uint32_t  xid;

    uint16_t  stats_type == 0xffff;
    enum      ofp_stats_request_flags flags;
    pad(4);

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 5; // OFDPA_EXP_DROP_STATUS_MULTIPART

    uint32_t  index;
    uint8_t   entry_type;
    pad(3);
};

struct of_ofdpa_drop_status_multipart_reply : of_experimenter_multipart_reply_ofdpa {
    uint8_t   version;
    uint8_t   type == 19;
    uint16_t  length;
    uint32_t  xid;

    uint16_t  stats_type == 0xffff;
    enum      ofp_stats_reply_flags flags;
    pad(4);

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 5; // OFDPA_EXP_DROP_STATUS_MULTIPART

    uint32_t  index;
    uint8_t   entry_type;
    uint8_t   drop_status;
    pad(2);
};

// ======================= OFDPA MPLS_TUNNEL_LABEL_REMARK_ACTION
struct of_ofdpa_mpls_tunnel_label_remark_action_mod_msg : of_experimenter_ofdpa {
    uint8_t   version;
    uint8_t   type == 4;
    uint16_t  length;
    uint32_t  xid;

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 8; // OFDPA_EXP_MPLS_TUNNEL_LABEL_REMARK_MOD_MSG

    enum ofdpa_message_mod_command mod_command;
    uint32_t  index;
    uint8_t   traffic_class;
    uint8_t   color;
    uint8_t   mpls_tc;
    uint8_t   vlan_pcp;
    uint8_t   vlan_dei;
    pad(3);
};

struct of_ofdpa_mpls_tunnel_label_remark_action_multipart_request : of_experimenter_multipart_request_ofdpa {
    uint8_t   version;
    uint8_t   type == 18;
    uint16_t  length;
    uint32_t  xid;

    uint16_t  stats_type == 0xffff;
    enum      ofp_stats_request_flags flags;
    pad(4);

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 9; // OFDPA_EXP_MPLS_TUNNEL_LABEL_REMARK_MULTIPART

    uint32_t  index;
    uint8_t   traffic_class;
    uint8_t   color;
    pad(2);
};

struct of_ofdpa_mpls_tunnel_label_remark_action_multipart_reply : of_experimenter_multipart_reply_ofdpa {
    uint8_t   version;
    uint8_t   type == 19;
    uint16_t  length;
    uint32_t  xid;

    uint16_t  stats_type == 0xffff;
    enum      ofp_stats_reply_flags flags;
    pad(4);

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 9; // OFDPA_EXP_MPLS_TUNNEL_LABEL_REMARK_MULTIPART

    uint32_t  index;
    uint8_t   traffic_class;
    uint8_t   color;
    uint8_t   mpls_tc;
    uint8_t   vlan_pcp;
    uint8_t   vlan_dei;
    pad(7);
};


enum ofdpa_all_messages_any_values (wire_type=uint64_t) {
    OFDPA_INDEX_ALL =   0xffffffff,
    OFDPA_LMEP_ALL =   0xffffffff
};

enum ofdpa_color_values (wire_type=uint16_t) {
    OFDPA_COLOR_GREEN = 0x0,
    OFDPA_COLOR_YELLOW = 0x1,
    OFDPA_COLOR_RED = 0x2,
    OFDPA_COLOR_ALL = 0xff
};

enum ofdpa_traffic_class_values (wire_type=uint16_t) {
    OFDPA_TRAFFIC_CLASS_BE = 0x0,
    OFDPA_TRAFFIC_CLASS_AF1 = 0x1,
    OFDPA_TRAFFIC_CLASS_AF2 = 0x2,
    OFDPA_TRAFFIC_CLASS_AF3 = 0x3,
    OFDPA_TRAFFIC_CLASS_AF4 = 0x4,
    OFDPA_TRAFFIC_CLASS_EF = 0x5,
    OFDPA_TRAFFIC_CLASS_CS6 = 0x6,
    OFDPA_TRAFFIC_CLASS_CS7 = 0x7,
    OFDPA_TRAFFIC_CLASS_ALL = 0xff
};
